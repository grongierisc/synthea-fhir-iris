Class HS.FHIR.Storage.Util.JSON.Adapter [ Abstract ]
{

/// A different entrance to FromJSON that starts with a directory provided in <var>dirName</var>.
/// Every file with the .json extension is consumed, the json scraped, and converted into an
/// object using FromJSON. The resulting objects are stored in <var>list</var>.
ClassMethod FromJSONDir(dirName As %String, Output list As %ListOfObjects, fhirVersion As %String(VALUELIST=",vSTU3,vR4")) As %Status
{
	set tSC = $$$OK
	try {
		set startTimer = $zts
		set list = ##class(%ListOfObjects).%New()
		
		set fileName = $zsearch(##class(%Library.File).NormalizeFilename(dirName _ "\*.json", dirName))
		if (fileName = "") {
			// "Directory contains no .json files"
		}
		while fileName '= "" {
			set obj = ..FromJSONFile(fileName, fhirVersion)
			
			set tSC = list.Insert(obj)
			$$$ThrowOnError(tSC)
			
			set fileName = $zsearch("")
		}
		set endTimer = $zts
		
		set runTime = (($piece(endTimer,",",2) - $piece(startTimer,",",2))*1000)
		//w "Runtime: " _ runTime _ " ms",!
	}
	catch ex {
		set tSC = ex.AsStatus()
	}
	quit tSC
}

/// A different entrance to FromJSON that starts with a full file name provided in <var>fileName</var>. JSON from
/// that file is scraped and used as the parameter in FromJSON
ClassMethod FromJSONFile(fileName As %String, fhirVersion As %String(VALUELIST=",vSTU3,vR4")) As %RegisteredObject
{
	set startTimer = $zts
	
	set obj = ""
	
	Set tFileName = ##class(%Library.File).NormalizeFilename(fileName)
	set tFileStream = ##class(%Stream.FileCharacter).%New()
	set tSC = tFileStream.LinkToFile(tFileName)
	
	set json = ##class(%Stream.TmpCharacter).%New()
	for {
		set line = tFileStream.ReadLine()
		if line = "" quit
		set tSC = json.WriteLine(line)
	}
	if json = "" {
		set tSC = $$$ERROR($$$GeneralError, "File " _ fileName _ " is empty or missing")
	}
	$$$ThrowOnError(tSC)
	
	set obj = ..FromJSON(json, fhirVersion)
	
	set endTimer = $zts
	
	set runTime = (($piece(endTimer,",",2) - $piece(startTimer,",",2))*1000)
	//w "Runtime: " _ runTime _ " ms",!
	quit obj
}

/// Deserialize a json stream into an instance of a class in HS.FHIR.<schema>.Model. This classmethod
/// should be called on the object in question whenever the type is known. Otherwise, if the object isn't a
/// resource, the deserialization will fail. eg. set obj = ##class(HS.FHIR.vSTU3.Model.Resource.Bundle).FromJSON(jsonStream)
ClassMethod FromJSON(json As %Stream.Object, fhirVersion As %String(VALUELIST=",vSTU3,vR4")) As %RegisteredObject
{
	if 'json.%Extends("%Stream.Object") {
		$$$ThrowOnError($$$ERROR($$$GeneralError, "JSON must be stored in a class that extends %Stream.Object"))
	}
		
	Set dynamicObject = ##class(%Library.DynamicAbstractObject).%FromJSON(json)
	if '$isobject(dynamicObject) {
		$$$ThrowOnError($$$ERROR($$$GeneralError, "Dynamic object could not be created from the JSON stream"))
	}
	
	new %propertyInfo
	quit ..FromJSONHelper(dynamicObject, fhirVersion)
}

ClassMethod FromJSONString() As %Status
{
	set dynamicObject = {}.%FromJSON("{""resourceType"":""Patient"",""id"":""toto"",""text"":{""status"":""generated"",""div"":""<div xmlns=\""http://www.w3.org/1999/xhtml\"">Generated by <a href=\""https://github.com/synthetichealth/synthea\"">Synthea</a>.Version identifier: v2.5.0-577-g1562628\n .   Person seed: 2760780543836589984  Population seed: 1</div>""},""extension"":[{""url"":""http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName"",""valueString"":""Odette Schmidt""},{""url"":""http://hl7.org/fhir/StructureDefinition/patient-birthPlace"",""valueAddress"":{""city"":""Foxborough"",""state"":""Massachusetts"",""country"":""US""}},{""url"":""http://synthetichealth.github.io/synthea/disability-adjusted-life-years"",""valueDecimal"":0.0},{""url"":""http://synthetichealth.github.io/synthea/quality-adjusted-life-years"",""valueDecimal"":25.0}],""identifier"":[{""system"":""https://github.com/synthetichealth/synthea"",""value"":""016d5db2-6a23-4d84-a898-a994c79e7eb1""},{""type"":{""coding"":[{""system"":""http://terminology.hl7.org/CodeSystem/v2-0203"",""code"":""MR"",""display"":""Medical Record Number""}],""text"":""Medical Record Number""},""system"":""http://hospital.smarthealthit.org"",""value"":""016d5db2-6a23-4d84-a898-a994c79e7eb1""},{""type"":{""coding"":[{""system"":""http://terminology.hl7.org/CodeSystem/v2-0203"",""code"":""SS"",""display"":""Social Security Number""}],""text"":""Social Security Number""},""system"":""http://hl7.org/fhir/sid/us-ssn"",""value"":""999-83-7406""},{""type"":{""coding"":[{""system"":""http://terminology.hl7.org/CodeSystem/v2-0203"",""code"":""DL"",""display"":""Driver's License""}],""text"":""Driver's License""},""system"":""urn:oid:2.16.840.1.113883.4.3.25"",""value"":""S99940290""},{""type"":{""coding"":[{""system"":""http://terminology.hl7.org/CodeSystem/v2-0203"",""code"":""PPN"",""display"":""Passport Number""}],""text"":""Passport Number""},""system"":""http://standardhealthrecord.org/fhir/StructureDefinition/passportNumber"",""value"":""X56672228X""}],""name"":[{""use"":""official"",""family"":""Schuster"",""given"":[""Tuan""],""prefix"":[""Mr.""]}],""telecom"":[{""system"":""phone"",""value"":""555-813-1457"",""use"":""home""}],""gender"":""male"",""birthDate"":""1994-05-16"",""address"":[{""extension"":[{""url"":""http://hl7.org/fhir/StructureDefinition/geolocation"",""extension"":[{""url"":""latitude"",""valueDecimal"":42.50437515824857},{""url"":""longitude"",""valueDecimal"":-71.07539255741429}]}],""line"":[""998 Cassin Branch""],""city"":""Lynnfield"",""state"":""Massachusetts"",""postalCode"":""01940"",""country"":""US""}],""maritalStatus"":{""coding"":[{""system"":""http://terminology.hl7.org/CodeSystem/v3-MaritalStatus"",""code"":""S"",""display"":""Never Married""}],""text"":""Never Married""},""multipleBirthBoolean"":false,""communication"":[{""language"":{""coding"":[{""system"":""urn:ietf:bcp:47"",""code"":""en-US"",""display"":""English""}],""text"":""English""}}],""meta"":{""lastUpdated"":""2020-06-15T07:46:35Z"",""versionId"":""1""}}")
	set fhirVersion = "vR4"
	Quit ##class(HS.FHIR.Util.JSON.Adapter).FromJSONHelper(dynamicObject,fhirVersion)
}

/// Helper method for deserializing a json stream into an object.
ClassMethod FromJSONHelper(dynamicObject As %DynamicObject, fhirVersion As %String(VALUELIST=",vSTU3,vR4")) As %RegisteredObject
{
	set className =  $classname($this)
	//Extract the classname from the class the method was called on. Also search for a "resourceType" element
	//that can further narrow down the classname (eg. from Base.Resource to AllergyIntolerance). But this should
	//only be done when the caller is Base.Resource or the abstract class JSON.Adapter to prevent it being used
	//when the resourceType element isn't on a resource (eg. ExplanationOfBenefit.payee.resourceType).
	if (dynamicObject.%Get("resourceType") '= "") && ((className = ("HS.FHIR.Storage." _ fhirVersion _ ".Model.Base.Resource")) || (className = "HS.FHIR.Util.JSON.Adapter")) {
		set className = "HS.FHIR.Storage." _ fhirVersion _ ".Model.Resource." _ dynamicObject.%Get("resourceType")
	}
	if className = "HS.FHIR.Storage.Util.JSON.Adapter" {
		if '##class(%Dictionary.ClassDefinition).%ExistsId(className) {
			$$$ThrowOnError($$$ERROR($$$GeneralError, "FromJSON must be called on the class the resulting object will be an instance of or on a resource with 'resourceType' set to a valid resource"))
		}
	}
	//Create a new instance of the object
	set obj = $classmethod(className, "%New")
	
	set iter = dynamicObject.%GetIterator()
	while iter.%GetNext(.propertyName, .dynValue) {
		if (propertyName = "resourceType") || (propertyName = "fhir_comments") continue
		
		if propertyName [ "_" {
			set propertyType = "HS.FHIR.Storage." _ fhirVersion _ ".Model.Base.Extension"
			set propertyCollection = "array"
		}
		elseif '$data(%propertyInfo(className, propertyName, "Type")) {
			set propertyType = $$$comMemberKeyGet(className, $$$cCLASSproperty, propertyName, $$$cPROPtype)
			set propertyCollection = $$$comMemberKeyGet(className, $$$cCLASSproperty, propertyName, $$$cPROPcollection)
			set %propertyInfo(className, propertyName, "Type") = propertyType
			set %propertyInfo(className, propertyName, "Collection") = propertyCollection
		}
		else {
			set propertyType = %propertyInfo(className, propertyName, "Type")
			set propertyCollection = %propertyInfo(className, propertyName, "Collection")
		}
		
		if (propertyType = "") && (propertyName '[ "_") {
			if $isvalidnum(propertyName) {
    			$$$ThrowOnError($$$ERROR($$$GeneralError, className _ " has cardinality of one, but recieved a list"))
			}
			else {
				$$$ThrowOnError($$$ERROR($$$GeneralError, "'" _ propertyName _ "' doesn't exist in " _ className))
			}
		}
		
		//Primitive extension
		if propertyName [ "_" {
    		//We are not currently supporting primitive extensions in any mappings, so we are
    		//not parsing it into the object model at all right now. Once the infrastructure
    		//is capable of handling it, we will remove the continue line below.
    		continue
    		/*
    		set primitivePropertyName = $extract(propertyName, 2, *)
    		if dynValue.%Get("fhir_comments") continue
    		
    		set extension = dynValue.%Get("extension")
    		set list = ##class(%ListOfObjects).%New()
    		set arrIter = extension.%GetIterator()
			while arrIter.%GetNext(.index, .dynArrValue) {
				do obj.primitiveExtension.Insert($classmethod("HS.FHIR.vSTU3.Model.Base.Extension", "FromJSONHelper", dynArrValue))
				
    			set primitiveValue = $property(obj, primitivePropertyName)
    			if $listvalid(primitiveValue) {
	    			set primitiveValue = $listupdate(primitiveValue, $listlength(primitiveValue) + 1, obj.primitiveExtension.Count())
    			}
    			else {
	    			set primitiveValue = $listbuild(primitiveValue, obj.primitiveExtension.Count())
    			}
    			set $property(obj, primitivePropertyName) = primitiveValue 
			}
			*/
		}
		//Is a list
		elseif (propertyCollection = "array") {
			set i = 0
			//Object
			if propertyType '[ "%" {
				set array = ##class(%ArrayOfObjects).%New()
			}
			//Primitive
			else {
				set array = ##class(%ArrayOfDataTypes).%New()
			}
			
			set arrIter = dynValue.%GetIterator()
			while arrIter.%GetNext(.index, .dynArrValue) {
				//Object
				if dynValue.%GetTypeOf(index) [ "object" {
					do array.SetAt($classmethod(propertyType, "FromJSONHelper", dynArrValue, fhirVersion),i)
				}
				//Primitive
				else {
					if $isobject(dynArrValue) {
						$$$ThrowOnError($$$ERROR($$$GeneralError, "The '" _ propertyName _ "' element in the '" _ obj.%ClassName(0) _ "' object expected a list of primitives, but got at least one object"))
					} 
					do array.SetAt(dynArrValue,i)
				}
				set i = i+1
			}		
			set $property(obj, propertyName) = array
			
		}
		//Is a single
		else {
			//Object
			if (propertyCollection = "") && (propertyType '[ "%") {
				//Recursive call to the Object method uses the schema property type as its
				//class name. A new object is created using that class name and populated.
				set $property(obj, propertyName) = $classmethod(propertyType, "FromJSONHelper", dynValue, fhirVersion)
			}
			//Primitive
			else {
				if $isobject(dynValue) {
					$$$ThrowOnError($$$ERROR($$$GeneralError, "The '" _ propertyName _ "' element in the '" _ obj.%ClassName(0) _ "' object expected a primitive, but got an object"))
				} 
				set $property(obj, propertyName) = $zconvert(dynValue, "I", "JSON")
			}
		}
	}
	quit obj
}

/// Serializes any FHIR resource that extends this class into a json Stream.
Method ToJSON() As %Stream.Object [ CodeMode = objectgenerator ]
{
	if (%class.Abstract) {
		quit $$$OK
	}
	do %code.WriteLine("    set outputStream = ##class(%Stream.TmpCharacter).%New()")
	do %code.WriteLine("    set jsonString = """"")
	do %code.WriteLine("    set tSC = ..ToJSONHelper(.outputStream, .jsonString, """", 0)")
	do %code.WriteLine("    $$$ThrowOnError(tSC)")
	do %code.WriteLine("	do outputStream.Write(jsonString)")
	do %code.WriteLine("	quit outputStream")
	
	quit $$$OK
}

/// Helper method for serialization. Should not be called externally.
Method ToJSONHelper(ByRef outputStream As %Stream.Object, Output jsonString As %String, indents As %String, inList) As %Status [ CodeMode = objectgenerator ]
{
	set tSC = $$$OK
	try {
		if (%class.Abstract) {
			quit
		}
	
		do %code.WriteLine("	set tSC = $$$OK")
		do %code.WriteLine("	try {")
		
		do %code.WriteLine("	set comma = 0")
		do %code.WriteLine("	set hasPrimitiveExtension = 0")
		do %code.WriteLine("	set newLine = $char(13, 10)")
		do %code.WriteLine("	set tabChar = ""  """)
		do %code.WriteLine("	if inList {")
		do %code.WriteLine("		set addString = indents do writeStr")
		do %code.WriteLine("	}")
		do %code.WriteLine("	set addString = ""{"" _ $char(13, 10) do writeStr")
		do %code.WriteLine("	set indents = indents _ tabChar")
		do %code.WriteLine("	")
		
		if (%compiledclass.Super [ "Base.DomainResource") || (%compiledclass.Super [ "Base.Resource") {
			do %code.WriteLine("	set addString = indents _ """"""resourceType"""": """""" _ $zconvert(..resourceType, ""O"", ""JSON"") _ """""""" do writeStr")
			do %code.WriteLine("	set comma = 1")
		}
		
		set propertyName = 0
		for i=1:1:%compiledclass.Properties.Count(){
			//Get list of properties for the given class
			set propertyName = %compiledclass.Properties.GetAt(i).Name
			set propertyType = %compiledclass.Properties.GetAt(i).Type
			set propertyCollection = %compiledclass.Properties.GetAt(i).Collection
			if (propertyName [ "%") || (propertyName = "primitiveExtension") || (propertyName = "newResource") || (propertyName = "newResourceReference") || (propertyName = "resourceType") continue
			
			//Is a list
			if propertyCollection = "list" {
				do %code.WriteLine("	if .." _ propertyName _ ".Count()>0 {")
				do %code.WriteLine("		if comma {")
				do %code.WriteLine("			set addString = "","" _ $char(13, 10) do writeStr")
				do %code.WriteLine("		}")
				do %code.WriteLine("		set comma = 1")
				do %code.WriteLine("		set addString = indents _ """"""" _ propertyName _ """"": ["" _ $char(13, 10) do writeStr")
				do %code.WriteLine("		set indents = indents _ tabChar")
				do %code.WriteLine("		for i=1:1:.." _ propertyName _ ".Count() {")
				do %code.WriteLine("			if i '= 1 set addString = "","" _ $char(13, 10) do writeStr")
				//Object
				if propertyType '[ "%" {
					do %code.WriteLine("			set tSC = .." _ propertyName _ ".GetAt(i).ToJSONHelper(.outputStream, .jsonString, indents, 1)")
					do %code.WriteLine("			quit:$$$ISERR(tSC)")
				}
				//Primitive
				else {
					if (propertyType [ "Integer") || (propertyType [ "Decimal") {
						do %code.WriteLine("			set addString = indents _ $select($extract(.." _ propertyName _ ".GetAt(i), 1)=""."":""0"", 1:"""") _ .." _ propertyName _ ".GetAt(i) do writeStr")
					}
					elseif propertyType [ "Boolean" {
						do %code.WriteLine("			set addString = indents _ $select(.." _ propertyName _ ".GetAt(i):""true"", 1:""false"") do writeStr")
					}
					else {
						do %code.WriteLine("			set addString = indents _ """""""" _ $zconvert(.." _ propertyName _ ".GetAt(i), ""O"", ""JSON"") _ """""""" do writeStr")
					}
				}
				do %code.WriteLine("		}")
				do %code.WriteLine("		set addString = $char(13, 10) do writeStr")
				do %code.WriteLine("		set indents = $replace(indents, tabChar,"""",, 1)")
				do %code.WriteLine("		set addString = indents _ ""]"" do writeStr")
			}
			//Is a single
			else {
				do %code.WriteLine("	if .." _ propertyName _ " '= """" {")
				do %code.WriteLine("		if comma {")
				do %code.WriteLine("			set addString = "","" _ $char(13, 10) do writeStr")
				do %code.WriteLine("		}")
				do %code.WriteLine("		set comma = 1")
				//Object
				if propertyType '[ "%" {
					do %code.WriteLine("		set addString = indents _ """"""" _ propertyName _ """"": "" do writeStr")
					do %code.WriteLine("		set tSC = .." _ propertyName _ ".ToJSONHelper(.outputStream, .jsonString, indents, 0)")
					do %code.WriteLine("		quit:$$$ISERR(tSC)")
				}
				//Primitive
				else {
					do %code.WriteLine("		set value = .." _ propertyName)
					do %code.WriteLine("		if $listvalid(.." _ propertyName _ ") {")
					do %code.WriteLine("			set value = $listget(.." _ propertyName _ ", 1)")
					do %code.WriteLine("			set hasPrimitiveExtension = 1")
					do %code.WriteLine("		}")
					do %code.Write("		set addString = indents _ """"""" _ propertyName _ """"": ")
					if (propertyType [ "Integer") || (propertyType [ "Decimal") {
						do %code.WriteLine(""" _ $select($extract(value, 1)=""."":""0"", 1:"""") _ value do writeStr")
					}
					elseif propertyType [ "Boolean" {
						do %code.WriteLine(""" _ $select(value:""true"", 1:""false"") do writeStr")
					}
					else {
						do %code.WriteLine(""""""" _ $zconvert(value, ""O"", ""JSON"") _ """""""" do writeStr")
					}
					
					do %code.WriteLine("		if hasPrimitiveExtension {")
					do %code.WriteLine("			set hasPrimitiveExtension = 0")
					do %code.WriteLine("			set addString = "","" _ $char(13, 10) do writeStr")
					do %code.WriteLine("			set addString = indents _ """"""_" _ propertyName _ """"": {"" _ $char(13, 10) do writeStr")
					do %code.WriteLine("			set indents = indents _ tabChar")
					do %code.WriteLine("			set addString = indents _ """"""extension"""": ["" _ $char(13, 10) do writeStr")
					do %code.WriteLine("			set indents = indents _ tabChar")
					do %code.WriteLine("			for extNum=2:1:$listlength(.." _ propertyName _ ") {")
					do %code.WriteLine("				if extNum '= 2 set addString = "","" _ $char(13, 10) do writeStr")
					do %code.WriteLine("				set extensionLocation = $listget(.." _ propertyName _ ", extNum)")
					do %code.WriteLine("				set tSC = ..primitiveExtension.GetAt(extensionLocation).ToJSONHelper(.outputStream, .jsonString, indents, 1)")
					do %code.WriteLine("				quit:$$$ISERR(tSC)")
					do %code.WriteLine("			}")
					do %code.WriteLine("			set addString = $char(13, 10) do writeStr")
					do %code.WriteLine("			set indents = $replace(indents, tabChar,"""",, 1)")
					do %code.WriteLine("			set addString = indents _ ""]"" _ $char(13, 10) do writeStr")
					do %code.WriteLine("			set indents = $replace(indents, tabChar,"""",, 1)")
					do %code.WriteLine("			set addString = indents _ ""}"" do writeStr")
					do %code.WriteLine("		}")
				}
			}
			do %code.WriteLine("	}")
		}
		
		do %code.WriteLine("	set indents = $replace(indents, tabChar,"""",, 1)")
		do %code.WriteLine("	set addString = $char(13, 10) do writeStr")
		do %code.WriteLine("	set addString = indents _ ""}"" do writeStr")
		
		do %code.WriteLine("	} catch ex {")
		do %code.WriteLine("		set tSC = ex.AsStatus()")
		do %code.WriteLine("	}")
		do %code.WriteLine("	quit tSC")
		do %code.WriteLine("writeStr")
		do %code.WriteLine("	if ($length(addString)+$length(jsonString))>2048 do outputStream.Write(jsonString) set jsonString = """"")
		do %code.WriteLine("	set jsonString = jsonString _ addString")
		do %code.WriteLine("	quit")
	} catch ex {
		set tSC = ex.AsStatus()
	}
	quit tSC
}

}
